{"/docs/backup":{"title":"Another Page","data":{"":"let a = 1;\n\nconsole.log(a);\nPython exmple\nimport numpy as np\nimport pandas as pd\n\nprint (\"hello world\")","component#Component":"","external-component#External Component":""}},"/docs/agent":{"title":"agent","data":{"":"","class-stable-baselines3#class stable-baselines3":"As a reference design, our AI agent directly loads the state-of-the-art models from the stable-baselines3.\nimport netaigym.env as env\nfrom stable_baselines3 import PPO\n\nenv = env(\"nqos_split\")\nmodel = PPO(\"MlpPolicy\", vec_env, verbose=1)\nmodel.learn(total_timesteps=25000)\nmodel.save(\"nqos_split\")\n\nPrior to initiating a simulation, the agent parameters, denoted as \"rl_agent_config\", can be customized using JSON files.\nFor instance, the nqos_split_config.json file is utilized to configure the nqos_split network environment.\nMoreover, the available options are listed in the \"rl_agent_config_option_list\" section of the JSON file. A list of configurable parameters for our agent is listed in the following table.\nParameter\tDescription\tagent\tselect agent, e.g., \"PPO\", \"DDPG\". Set to \"\" will disable agent, i.e., use the system's default algorithm for offline data collection\tpolicy\tselet policy\ttrain\tset to \"true\" to train model, set to \"false\" to test saved model\treward_type\tselect reward function\tinput\tselect \"matrix\" or \"flat\" input type for observations"}},"/docs/cellular_ran_slicing":{"title":"Traffic Splitting","data":{"":"Let me try somethinf."}},"/docs/client":{"title":"client","data":{"":"","class-netaigymclient#class netaigym.client":"netaigym client software includes the three components, a customized gymnasium.env, adapter and northbound_api.\nThe customized gymnasium.env inherets the environment class of gymnasium and communicates with the agent using the standard gymnasium interfaces. E.g., exchange obs, reward and action in the reset() and step() functions.\n\n\nimport gymnasium as gym\nclass netaigym_env(gym.Env):\n\"\"\"Custom Environment that follows gym interface.\"\"\"\n\ndef __init__(self, arg1, arg2, ...):\nsuper().__init__()\n...\n\ndef step(self, action):\n...\nreturn observation, reward, terminated, truncated, info\n\ndef reset(self, seed=None, options=None):\n...\nreturn observation, info\n\nThe adapter transform the data format from gymnasium to netaigym or the other way around. E.g., it transforms network stats to obs and reward, and changes action to policy.\nThe northbound_api connects the client to the server, configure the environment parameters, communicate network stats and policy between client and netaigym envrionment."}},"/docs/client/northbound_api":{"title":"northbound API","data":{"":"","class-netaigymclientnorthbound_api#class netaigym.client.northbound_api":"The northbound_api connects the client to the server, configure the environment parameters, communicate network stats and policy between client and netaigym envrionment.","methods#Methods":"netaigym.client.northbound_api.connect(self)\n\nConnect to the netaigym environment via netaigym server.\n\nnetaigym.client.northbound_api.send(self, policy: JSON)\n\nSend the policy to the netaigym envrionment.\n\nnetaigym.client.northbound_api.recv(self) -> network_stats: list[pandas.DataFrame]\n\nReceive the network stats from the netaigym environment.","attributes#Attributes":"Network Environment Simulation Parameters\nPrior to initiating a simulation for a network environment, the network environment parameters, denoted as \"gmasim_config\", can be customized using JSON files.\nFor instance, the nqos_split_config.json file is utilized to configure the nqos_split environment.\nIt's important to note that certain parameters may only be relevant to specific subsets of environments.\nFor example, the parameter \"slice_list\" is exclusively applicable to the Cellular RAN Slicing environment.\nParameter\tDescription\tsimulation_time_s\tsimulation time in seconds\trandom_run\tchange the random seed for this simulation\tdownlink\tset to true to simulate downlink data flow, set to false to simulate uplink data flow\tmax_wait_time_for_action_ms\tthe max time the netaisim worker will wait for an action. set to -1 will cap the wait time to 100 seconds.\tenb_locations\tx, y and z locations of the base station, we support 1 base station only\tap_locations\tx, y and z location of the Wi-Fi access point, add or remove element in this list to increase or reduce AP number. We support no AP as well\tnum_users\tthe number of users\tslice_list\tnetwork slicing environment only, resouce block group (rbg) size maybe 1, 2, 3 or 4, it depends on the resource block num, see table 7.1.6.1-1 of 36.213\tuser_left_right_speed_m/s\tuser speed (m/s). Users only move to left or right. When a user reaches the doundry, it reverse the direction\tuser_location_range\tinitially, users will be randomly deployed within this x, y range. if user_left_right_speed_m > 0, the user will move left and right within this boundary\tapp_and_measurement_start_time_ms\twhen the application starts traffic and send measurement to RL agent\ttransport_protocol\ttcp or udp\tmin_udp_rate_per_user_mbps\tif \"transport_protocol\" is \"udp\", this para controls the min sending rate\tmax_udp_rate_per_user_mbps\tif \"transport_protocol\" is \"udp\", this para controls the max sending rate\tqos_requirement:test_duration_ms\tduration for qos testing\tqos_requirement:delay_bound_ms\tmax delay for qos flow\tqos_requirement:delay_violation_target\tdelay violation target for qos flow\tqos_requirement:loss_target\tloss target for qos flow\tGMA:downlink_mode\t\"auto\", \"split\", or \"steer\". \"auto\" will config UDP and TCP ACK as steer and TCP data as split\tGMA:uplink_mode\t\"auto\", \"split\", or \"steer\". \"auto\" will config UDP and TCP ACK as steer and TCP data as split\tGMA:measurement_interval_ms\tduration of a measurement interval for GMA\tGMA:measurement_guard_interval_ms\tgap between 2 measurement interval for GMA\tGMA:respond_action_after_measurement\twhether to response action after receiving measurement, do not change it\tWi-Fi:ap_share_same_band\tset to true, ap will share the same frequency band\tWi-Fi:measurement_interval_ms\tduration of a measurement interval for Wi-Fi\tWi-Fi:measurement_guard_interval_ms\tgap between 2 measurement interval for Wi-Fi\tLTE:qos_aware_scheduler\tqos_steer environment only, set to true to enable qos aware scheduler for LTE\tLTE:resource_block_num\tnumber of resouce blocks for LTE, 25 for 5 MHZ, 50 for 10 MHZ, 75 for 15 MHZ and 100 for 20 MHZ\tLTE:measurement_interval_ms\tduration of a measurement interval for LTE\tLTE:measurement_guard_interval_ms\tgap between 2 measurement interval for LTE\n\n\nNetwork Stats\nAt the end of each measurement interval, the netaigym API communicates the following networks stats measurement to the client.\nThe client will use the adapter to transform these measurements into observations and rewards.\nMeasurement\tUnit\tDescription\tmax_rate\tmbps\tLTE/Wi-Fi link capacity measured by each user\tload\tmbps\tinput traffic throughput measured by each user\trate\tmbps\toutput traffic throughput measured by each user, including LTE, Wi-Fi, and ALL\tqos_rate\tmbps\toutput traffic throughput that meet the QoS requirement measured by each user, including LTE, Wi-Fi, and ALL\towd\tms\tone-way delay measured by each user, including LTE, Wi-Fi, and ALL\ttsu\t\ttraffic split ratio measured by each user, including LTE, Wi-Fi\tap_id\t\taccess-point/cell ID measured by each user, including LTE and Wi-Fi\tslice_id\t\tLTE slice ID measured by each user\trb_usage\t%\tLTE resource block usage percentage (%) measured by each user\tdelay_violation\t%\tpacket One-way delay violation percentage (%) measured by each user\n\n\n\nNetwork Environment/Policy\nWhen the agent returns a action, the netaigym client utilizes the adapter to convert the action to policy, which will be applied to the netaigym environment.\nEnvironment\tPolicy\tDescription\tnqos_split: Multi-Access (MX) Traffic Splitting\tTraffic Splitting\tThe agent updates traffic split ratio over Wi-Fi and LTE for each user\tqos_steer: QoS-aware MX Traffic Steering\tTraffic Steering\tThe agent steers traffic over Wi-Fi or LTE for each user\tnetwork_slicing: Cellular RAN Slicing\tResource Allocation\tThe agent updates LTE resource block allocation ratio for a slice"}},"/docs/env":{"title":"env","data":{"":"","class-netaigymenv#class netaigym.env":"netaigym.env includes the two components, a southbound_api, and a simulator: NetAISim.\nThe southbound_api connects the env to the server, receives the environment parameters, communicate network stats and policy between env and server.\nAt present, we only support NetAISim simulator. The emulator and testbed option will be released in the future.\n\n\nAt present, we do not plan to release the netaigym.env."}},"/docs/client/adapter":{"title":"adapter","data":{"":"","class-netaigymclientadapter#class netaigym.client.adapter":"The adapter transform the data format from gymnasium to netaigym or the other way around. E.g., it transforms network stats to obs and reward, and changes action to policy.\nThe methods that perform the data transformation is provided in the following section.","methods#Methods":"netaigym.client.adapter.action_to_policy(self, action: ActType) -> policy: JSON\n\nIn the step() function, call this function to transform the action format from the Gymnasium action datatype: Spaces to the policy: JSON, then send to the netaigym environment.\n\nnetaigym.client.adapter.network_stats_to_obs(self, network_stats: list[pandas.DataFrame]) -> obs: ObsType\n\nIn the reset() and step() functions, call this function to transform network stats: list[pandas.DataFrame] measured from netaigym environment to the Gymnasium observation datatype: Spaces.\n\nnetaigym.client.adapter.network_stats_to_reward(self, network_stats: list[pandas.DataFrame]) -> reward\n\nIn the reset() and step() functions, call this function to transform network stats: list[pandas.DataFrame] measured from netaigym environment to the Gymnasium reward datatype: Spaces."}},"/docs/env/southbound_api":{"title":"southbound API","data":{"":"","class-netaigymclientsouthbound_api#class netaigym.client.southbound_api":"At present, we do not plan to release the netaigym.client.southbound_api."}},"/docs/environments":{"title":"environment API","data":{"":"An environment must be selected when launching the python client. The supported [ENV] is provided in the following table.\npython3 main_rl.py --env=[ENV]\n\nENV\tPolicy\tDescription\tnqos_split\tTraffic Splitting\tMulti-Access (MX) Traffic Splitting: The agent controls the traffic split ratio over Wi-Fi and LTE for each user\tqos_steer\tTraffic Steering\tQoS-aware MX Traffic Steering: The agent steers traffic over Wi-Fi or LTE for each user\tnetwork_slicing\tRAN Resource Allocation\tCellular RAN Slicing: The agent selects the dedicated, prioritzed, shared resource block groups for a slice"}},"/docs/env/simulator":{"title":"simulator","data":{"":"","netaisim#NetAISim":"NetAISim is a ns-3 based network simualtor with advanced features such as multi-access traffic management, network slicing, etc.\nAt present, we do not plan to release the NetAISim."}},"/docs":{"title":"Guide","data":{"":"","get-access-to-netaigym-testbed-via-vlab#Get Access to NetAIGym Testbed via vLab":"We have hosted NetAIGym Env (NetAIServer and NetAISim) on vLab machines to collaborate with MLWiNS/RINGs universities.\nBy utilizing the NetAIGym Open API, a NetAIClient can establish a connection with the NetAIGym Environment through either the public internet or Intel's internal network.\nIf you have any issue getting access to vLab, please reach out to us at netaigym@gmail.com.Next, we plan to launch NetAIGym Sim-aaS via Intel DevCloud and make it available for all Intel developers.\nIn the meantime, we are collaborating with the research community to enhance NetAISim with new use-cases & capabilities, e.g., 5G/O-RAN, distributed computing, RAN energy saving, predictive QoS, etc.","launch-your-first-network-ai-simulation#Launch Your First Network AI Simulation":"After acquiring early access to NetAIGym, you can proceed to download the client software, NetAIClient, in order to initiate your initial simulation.\nFor additional information regarding the client software, please refer to the NetAIClient Github Repository.","️-upon-starting-the-netaiclient-the-following-series-of-steps-occur#▶️ Upon starting the NetAIClient, the following series of steps occur:":"The NetAIClient initiates by sending a JSON configure file to the NetAIServer, triggering the launch of an ns-3 simulation.","-during-the-simulation-the-process-repeats-as-follows#🔁 During the simulation, the process repeats as follows:":"NetAISim collects measurement metrics and transmits them to the NetAIServer.\nThe NetAIServer forwards the measurements to the NetAIClient using the NetAIGym Open API.\n\n\nAn Algorithm Agent, which could be either AI or non-AI, computes an action based on the received measurements and stores relevant data in WandB.\nThe NetAIClient transmits the computed action to the NetAISim through the NetAIGym Open API, enabling the simulation to continue with the new action.","️-when-the-netaiclient-or-the-simulation-concludes#⏹️ When the NetAIClient or the simulation concludes:":"The data stored in Wandb can be conveniently visualized on the Wandb website."}},"/docs/mx/mx_traffic_splitting":{"title":"Multi-Access(MX) Traffic Splitting","data":{"":"In this example, we will guide you through the step-by-step procedure of initiating a simulation for the multi-access traffic splitting environment.\nWithin this case, the agent performs the following action at regular intervals: it updates the traffic split ratio for each user, considering both Wi-Fi and LTE connections.","prerequisite#Prerequisite":"Make sure you have the access to the NetAIGym Vlab Access (contact us for more information) and downloaded the NetAIClient","network-topology#Network Topology":"","configuration#Configuration":"","performance-metrics#Performance Metrics":"","how-to-coonfigure-and-run-your-example#How to coonfigure and run your example":"","how-to-build-your-own-observations-and-reward#how to build your own observations and reward":""}},"/docs/mx/qos_aware_mx_traffic_steering":{"title":"QoS aware Traffic Splitting","data":{"":"Let me try somethinf."}},"/docs/server":{"title":"server","data":{"":"","class-netaigymserver#class netaigym.server":"The netaigym server includes two components, the northbound manages the connections with the clients, and the southbound manages the connections with the environments.\nWhen a client connects, the server selects an idle environment instance and add the client to envrionment mapping to the routing table.\nAt present, we do not plan to release the netaigym.server."}},"/news":{"title":"News","data":{"":"News\n\nStay tuned for NetAIGym's news update."}},"/docs/overview":{"title":"Overview","data":{"":"The netaigym offers northbound API for the netaigym.client to select and configure network environment.\nnetaigym also provides environment specific adapters to transform the netaigym dataformat to the gymnasium data format, then interact with the gymnasium compatible agents such as stable-baselines3 and cleanRL.\nAt present, netaigym caters to Three distinct network environments (policy) and provides support for Ten different network stats measurement metrics.\nThe southbound API that bridges the netaigym server and environment will be released in the future.","flow-chart#Flow Chart":"","class-diagram#Class Diagram":""}},"/":{"title":"NetAIGym: Network AI Simulation-as-a-Service","data":{"":"Introducing NetAIGym (Network AI Gym), an open Simulation-as-a-Service framework to revolutionize Network AI Research and Development. NetAIGym comprises three key components, each playing a vital role in the framework:\n\n\nNetAIClient: This Python-based interface that offers researchers and developers a comprehensive development environment following the Open AI Gym/Gymnasium standards.\nIt caters to the development of both AI and non-AI algorithms, empowering users with a versatile toolkit such as Stable-Baselines3 and WanDB.\nNetAIGym API: Open API for collecting data and interacting with the simulated network environment.\nNetAIGym Env (NetAIServer & NetAISim): Leverage open-source network simulation tools, e.g., ns-3; Enhance it with customized capabilities & use-cases, e.g. Traffic Steering, Network Slicing, Distributed Compute, Dynamic QoS, Energy Saving, etc.","what-is-netaigym-about-and-not-about#What is NetAIGym about and NOT about?":"","️-in-scope#✔️ In-Scope":"Develop open & reference AI models/algos for networking research (Layer 2 & above)\nDevelop abstract models, e.g. channel, compute, power, etc. for the physical world & system\nDevelop full-stack models to simulate E2E (Access/Edge/Cloud) network operation with high fidelity","-out-of-scope#❌ Out-of-Scope":"Develop proprietary AI algorithms or models\nDevelop AI application or software, e.g. xApp/rApp, etc., based on controller architecture, e.g. O-RAN RIC, etc.\nDevelop “Digital Twin” to simulate the physical world with high fidelity\n\n\n\n\n\nGet started →"}},"/references/gymnasium":{"title":"OpenAI Gym/Gymnasium","data":{"":"Gymnasium is a standard API for reinforcement learning, and a diverse collection of reference environments."}},"/references/ns3":{"title":"ns-3","data":{"":"ns-3 is a discrete-event network simulator for Internet systems, targeted primarily for research and educational use. ns-3 is free, open-source software, licensed under the GNU GPLv2 license, and maintained by a worldwide community.","ns-3-community#ns-3 community":"Number of publications involving ns-3: A search of the ‘ns-3 simulator’ results on https://scholar.google.com\nsince 2017 (excluding patents and citations) yields over 17,300 links (with some false positives).\nThe ACM digital library lists 11,830 publications matching the search term ‘ns-3’ (in abstract) since 2017(searched 6/15/23).\nns-3-users group: As of January 2018, there were 8183 members of the ns-3-users group. The number of posts to the ns-3-users group can be viewed at this web page. In 2017, there were approximately 700 posts/month.\nns-developers mailing list: The ns-developers mailing list is where software development discussions take place. As of January 2018, there were 1560 subscribers to this list.\nNumber of authors: As of ns-3.27 release, 220 people are listed as authors in the AUTHORS file.\nNumber of maintainers: ns-3 maintainers have responsibility and authority to oversee and maintain different portions of the codebase. As of ns-3.27 release, 23 people are listed as ns-3 maintainers.\nNumber of downloads: The project has not been maintaining counts of downloads for the past few years. In 2016 (the last year counted), ns-3 releases were downloaded approximately 72,000 times from the main web server."}},"/references/zeromq":{"title":"ZeroMQ","data":{"":"ZeroMQ (also spelled ØMQ, 0MQ or ZMQ) is a high-performance asynchronous messaging library, aimed at use in distributed or concurrent applications. It provides a message queue, but unlike message-oriented middleware, a ZeroMQ system can run without a dedicated message broker.ZeroMQ supports common messaging patterns (pub/sub, request/reply, client/server and others) over a variety of transports (TCP, in-process, inter-process, multicast, WebSocket and more), making inter-process messaging as simple as inter-thread messaging. This keeps your code clear, modular and extremely easy to scale.ZeroMQ is developed by a large community of contributors. There are third-party bindings for many popular programming languages and native ports for C# and Java."}},"/why/where_is_data":{"title":"Where is Data?","data":{"":"","network-ai-developer-challenges-why-netaigym#Network AI Developer Challenges (Why NetAIGym?)":"real-world dataset controlled by network operator, difficult to acquire, not aligned with specific usage or requirement.\ndataset by itself not enough, also need environment to train/test AI models, e.g. Reinforcement Learning, etc.\nnetwork simulation tools (e.g., ns3, etc.) often very complex and difficult to use, especially for Network AI researcher & developer.\nlack of common simulation environment with simple APIs to develop, evaluate, and benchmark Network AI models & algorithms."}},"/references/stable_baselines_3":{"title":"Stable-Baselines3 Docs","data":{"":"Stable Baselines3 (SB3) is a set of reliable implementations of reinforcement learning algorithms in PyTorch. It is the next major version of Stable Baselines.Github repository: https://github.com/DLR-RM/stable-baselines3Paper: https://jmlr.org/papers/volume22/20-1364/20-1364.pdfRL Baselines3 Zoo (training framework for SB3): https://github.com/DLR-RM/rl-baselines3-zooRL Baselines3 Zoo provides a collection of pre-trained agents, scripts for training, evaluating agents, tuning hyperparameters, plotting results and recording videos.SB3 Contrib (experimental RL code, latest algorithms): https://github.com/Stable-Baselines-Team/stable-baselines3-contrib"}}}